// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.4.0
// - protoc             v3.21.3
// source: api/book/book.proto

package book

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBookCreateBook = "/api.book.Book/CreateBook"
const OperationBookDeleteBook = "/api.book.Book/DeleteBook"
const OperationBookGetBook = "/api.book.Book/GetBook"
const OperationBookListBook = "/api.book.Book/ListBook"
const OperationBookUpdateBook = "/api.book.Book/UpdateBook"

type BookHTTPServer interface {
	CreateBook(context.Context, *CreateBookRequest) (*CreateBookReply, error)
	DeleteBook(context.Context, *DeleteBookRequest) (*DeleteBookReply, error)
	GetBook(context.Context, *GetBookRequest) (*GetBookReply, error)
	ListBook(context.Context, *ListBookRequest) (*ListBookReply, error)
	UpdateBook(context.Context, *UpdateBookRequest) (*UpdateBookReply, error)
}

func RegisterBookHTTPServer(s *http.Server, srv BookHTTPServer) {
	r := s.Route("/")
	r.GET("/createBook/{name}", _Book_CreateBook0_HTTP_Handler(srv))
	r.GET("/updateBook/{name}", _Book_UpdateBook0_HTTP_Handler(srv))
	r.GET("/deleteBook/{name}", _Book_DeleteBook0_HTTP_Handler(srv))
	r.GET("/getBook/{name}", _Book_GetBook0_HTTP_Handler(srv))
	r.GET("/listBook/{name}", _Book_ListBook0_HTTP_Handler(srv))
}

func _Book_CreateBook0_HTTP_Handler(srv BookHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateBookRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBookCreateBook)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateBook(ctx, req.(*CreateBookRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateBookReply)
		return ctx.Result(200, reply)
	}
}

func _Book_UpdateBook0_HTTP_Handler(srv BookHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateBookRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBookUpdateBook)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateBook(ctx, req.(*UpdateBookRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateBookReply)
		return ctx.Result(200, reply)
	}
}

func _Book_DeleteBook0_HTTP_Handler(srv BookHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteBookRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBookDeleteBook)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteBook(ctx, req.(*DeleteBookRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteBookReply)
		return ctx.Result(200, reply)
	}
}

func _Book_GetBook0_HTTP_Handler(srv BookHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetBookRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBookGetBook)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetBook(ctx, req.(*GetBookRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetBookReply)
		return ctx.Result(200, reply)
	}
}

func _Book_ListBook0_HTTP_Handler(srv BookHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListBookRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBookListBook)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListBook(ctx, req.(*ListBookRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListBookReply)
		return ctx.Result(200, reply)
	}
}

type BookHTTPClient interface {
	CreateBook(ctx context.Context, req *CreateBookRequest, opts ...http.CallOption) (rsp *CreateBookReply, err error)
	DeleteBook(ctx context.Context, req *DeleteBookRequest, opts ...http.CallOption) (rsp *DeleteBookReply, err error)
	GetBook(ctx context.Context, req *GetBookRequest, opts ...http.CallOption) (rsp *GetBookReply, err error)
	ListBook(ctx context.Context, req *ListBookRequest, opts ...http.CallOption) (rsp *ListBookReply, err error)
	UpdateBook(ctx context.Context, req *UpdateBookRequest, opts ...http.CallOption) (rsp *UpdateBookReply, err error)
}

type BookHTTPClientImpl struct {
	cc *http.Client
}

func NewBookHTTPClient(client *http.Client) BookHTTPClient {
	return &BookHTTPClientImpl{client}
}

func (c *BookHTTPClientImpl) CreateBook(ctx context.Context, in *CreateBookRequest, opts ...http.CallOption) (*CreateBookReply, error) {
	var out CreateBookReply
	pattern := "/createBook/{name}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBookCreateBook))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BookHTTPClientImpl) DeleteBook(ctx context.Context, in *DeleteBookRequest, opts ...http.CallOption) (*DeleteBookReply, error) {
	var out DeleteBookReply
	pattern := "/deleteBook/{name}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBookDeleteBook))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BookHTTPClientImpl) GetBook(ctx context.Context, in *GetBookRequest, opts ...http.CallOption) (*GetBookReply, error) {
	var out GetBookReply
	pattern := "/getBook/{name}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBookGetBook))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BookHTTPClientImpl) ListBook(ctx context.Context, in *ListBookRequest, opts ...http.CallOption) (*ListBookReply, error) {
	var out ListBookReply
	pattern := "/listBook/{name}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBookListBook))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BookHTTPClientImpl) UpdateBook(ctx context.Context, in *UpdateBookRequest, opts ...http.CallOption) (*UpdateBookReply, error) {
	var out UpdateBookReply
	pattern := "/updateBook/{name}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBookUpdateBook))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
