// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.11.4
// source: api/catalog/service/v1/catalog.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CatalogClient is the client API for Catalog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CatalogClient interface {
	ListBeer(ctx context.Context, in *ListBeerReq, opts ...grpc.CallOption) (*ListBeerReply, error)
	ListBeerNextToken(ctx context.Context, in *ListBeerNextTokenReq, opts ...grpc.CallOption) (*ListBeerReplyNextToken, error)
	CreateBeer(ctx context.Context, in *CreateBeerReq, opts ...grpc.CallOption) (*CreateBeerReply, error)
	GetBeer(ctx context.Context, in *GetBeerReq, opts ...grpc.CallOption) (*GetBeerReply, error)
	UpdateBeer(ctx context.Context, in *UpdateBeerReq, opts ...grpc.CallOption) (*UpdateBeerReply, error)
	DeleteBeer(ctx context.Context, in *DeleteBeerReq, opts ...grpc.CallOption) (*DeleteBeerReply, error)
}

type catalogClient struct {
	cc grpc.ClientConnInterface
}

func NewCatalogClient(cc grpc.ClientConnInterface) CatalogClient {
	return &catalogClient{cc}
}

func (c *catalogClient) ListBeer(ctx context.Context, in *ListBeerReq, opts ...grpc.CallOption) (*ListBeerReply, error) {
	out := new(ListBeerReply)
	err := c.cc.Invoke(ctx, "/catalog.service.v1.Catalog/ListBeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) ListBeerNextToken(ctx context.Context, in *ListBeerNextTokenReq, opts ...grpc.CallOption) (*ListBeerReplyNextToken, error) {
	out := new(ListBeerReplyNextToken)
	err := c.cc.Invoke(ctx, "/catalog.service.v1.Catalog/ListBeerNextToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) CreateBeer(ctx context.Context, in *CreateBeerReq, opts ...grpc.CallOption) (*CreateBeerReply, error) {
	out := new(CreateBeerReply)
	err := c.cc.Invoke(ctx, "/catalog.service.v1.Catalog/CreateBeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) GetBeer(ctx context.Context, in *GetBeerReq, opts ...grpc.CallOption) (*GetBeerReply, error) {
	out := new(GetBeerReply)
	err := c.cc.Invoke(ctx, "/catalog.service.v1.Catalog/GetBeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) UpdateBeer(ctx context.Context, in *UpdateBeerReq, opts ...grpc.CallOption) (*UpdateBeerReply, error) {
	out := new(UpdateBeerReply)
	err := c.cc.Invoke(ctx, "/catalog.service.v1.Catalog/UpdateBeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) DeleteBeer(ctx context.Context, in *DeleteBeerReq, opts ...grpc.CallOption) (*DeleteBeerReply, error) {
	out := new(DeleteBeerReply)
	err := c.cc.Invoke(ctx, "/catalog.service.v1.Catalog/DeleteBeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CatalogServer is the server API for Catalog service.
// All implementations must embed UnimplementedCatalogServer
// for forward compatibility
type CatalogServer interface {
	ListBeer(context.Context, *ListBeerReq) (*ListBeerReply, error)
	ListBeerNextToken(context.Context, *ListBeerNextTokenReq) (*ListBeerReplyNextToken, error)
	CreateBeer(context.Context, *CreateBeerReq) (*CreateBeerReply, error)
	GetBeer(context.Context, *GetBeerReq) (*GetBeerReply, error)
	UpdateBeer(context.Context, *UpdateBeerReq) (*UpdateBeerReply, error)
	DeleteBeer(context.Context, *DeleteBeerReq) (*DeleteBeerReply, error)
	mustEmbedUnimplementedCatalogServer()
}

// UnimplementedCatalogServer must be embedded to have forward compatible implementations.
type UnimplementedCatalogServer struct {
}

func (UnimplementedCatalogServer) ListBeer(context.Context, *ListBeerReq) (*ListBeerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBeer not implemented")
}
func (UnimplementedCatalogServer) ListBeerNextToken(context.Context, *ListBeerNextTokenReq) (*ListBeerReplyNextToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBeerNextToken not implemented")
}
func (UnimplementedCatalogServer) CreateBeer(context.Context, *CreateBeerReq) (*CreateBeerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBeer not implemented")
}
func (UnimplementedCatalogServer) GetBeer(context.Context, *GetBeerReq) (*GetBeerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBeer not implemented")
}
func (UnimplementedCatalogServer) UpdateBeer(context.Context, *UpdateBeerReq) (*UpdateBeerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBeer not implemented")
}
func (UnimplementedCatalogServer) DeleteBeer(context.Context, *DeleteBeerReq) (*DeleteBeerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBeer not implemented")
}
func (UnimplementedCatalogServer) mustEmbedUnimplementedCatalogServer() {}

// UnsafeCatalogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CatalogServer will
// result in compilation errors.
type UnsafeCatalogServer interface {
	mustEmbedUnimplementedCatalogServer()
}

func RegisterCatalogServer(s grpc.ServiceRegistrar, srv CatalogServer) {
	s.RegisterService(&Catalog_ServiceDesc, srv)
}

func _Catalog_ListBeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBeerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).ListBeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.service.v1.Catalog/ListBeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).ListBeer(ctx, req.(*ListBeerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_ListBeerNextToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBeerNextTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).ListBeerNextToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.service.v1.Catalog/ListBeerNextToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).ListBeerNextToken(ctx, req.(*ListBeerNextTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_CreateBeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBeerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).CreateBeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.service.v1.Catalog/CreateBeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).CreateBeer(ctx, req.(*CreateBeerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_GetBeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBeerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).GetBeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.service.v1.Catalog/GetBeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).GetBeer(ctx, req.(*GetBeerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_UpdateBeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBeerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).UpdateBeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.service.v1.Catalog/UpdateBeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).UpdateBeer(ctx, req.(*UpdateBeerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_DeleteBeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBeerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).DeleteBeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.service.v1.Catalog/DeleteBeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).DeleteBeer(ctx, req.(*DeleteBeerReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Catalog_ServiceDesc is the grpc.ServiceDesc for Catalog service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Catalog_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "catalog.service.v1.Catalog",
	HandlerType: (*CatalogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBeer",
			Handler:    _Catalog_ListBeer_Handler,
		},
		{
			MethodName: "ListBeerNextToken",
			Handler:    _Catalog_ListBeerNextToken_Handler,
		},
		{
			MethodName: "CreateBeer",
			Handler:    _Catalog_CreateBeer_Handler,
		},
		{
			MethodName: "GetBeer",
			Handler:    _Catalog_GetBeer_Handler,
		},
		{
			MethodName: "UpdateBeer",
			Handler:    _Catalog_UpdateBeer_Handler,
		},
		{
			MethodName: "DeleteBeer",
			Handler:    _Catalog_DeleteBeer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/catalog/service/v1/catalog.proto",
}
